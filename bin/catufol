#!/usr/bin/env node
/* global require */
/* global process */
'use strict';

const path = require('path');
const fs = require('fs');
const cli = require('../src/cli/cli');
const clean = require('../src/fs/clean');
const tester = require('../src/tester');
const packager = require('../src/packager');
const Conf = require('../src/config');
const argumenter = require('../src/cli/argumenter');
const args = process.argv;

function loadConf (action) {
    const defPath = path.resolve(process.cwd(), action.confPath);
    if (fs.existsSync(defPath)) {
        return validateConf(
            JSON.parse(fs.readFileSync(path.resolve(process.cwd(), action.confPath), 'utf8')),
            action.packageName, action.packageMain
        );
    }
    return validateConf({}, action.packageName, action.packageMain);
}

function validateConf (conf, packName, packMain) {
    if (!conf.appName) {
        conf.appName = packName;
    }
    if (!conf.entryFile) {
        conf.entryFile = packMain;
    }
    if (!conf.vendors) {
        conf.vendors = [];
    }
    return conf;
}

argumenter.read(args).subscribe(
    action => {
        const conf = new Conf(loadConf(action));
        if (action.name === 'test') {
            cli.log('Running Unit Tests with Karma and Jasmine.' );
            tester.singleRun(conf, exitCode => { process.exit(exitCode); });
            return;
        }
        if (action.name === 'headless') {
            cli.log('Running Unit Tests with Karma and Jasmine in Headless mode.');
            tester.headlessRun(conf, exitCode => { process.exit(exitCode); });
            return;
        }
        if (action.name === 'interactive') {
            cli.log('Running Unit Tests with Karma and Jasmine.' );
            tester.interactiveRun(conf, exitCode => { process.exit(exitCode); });
            return;
        }
        if (action.name === 'run') {
            cli.log('Starting Webpack development Server.' );
            packager.run(conf);
            return;
        }
        if (action.name === 'build') {
            cli.log('Starting Webpack package build.' );
            clean(path.resolve(process.cwd(), conf.buildPath()));
            packager.build(conf);
            return;
        }
        if (action.name === 'help') {
            console.log([
                'usage: catufol [options]',
                '',
                'options:',
                '  --conf              Path to configuration file',
                '  -t --test           Run unit tests once',
                '  -hl --headless      Run unit tests once in headless mode',
                '  -r --run            Run Webpack Development Server',
                '  -b --build          Build package with Webpack',
                '  -i --interactive    Run unit tests in debug mode (continuously)',
                '  -h --help           Print this list and exit.'
            ].join('\n'));
        }
    },
    error => { cli.log('Error: ' + error.message); },
    () => {}
);
